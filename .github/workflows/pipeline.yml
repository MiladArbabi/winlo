name: CI / CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

permissions:
  contents: read               # for checkout
  packages: write              # to push to GHCR
  id-token: write              # if you later need OIDC for cloud

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository_owner }}/winlo-api

jobs:
  # 1) Lint & Test both API and Admin
  test:
    name: ðŸ§ª Lint & Test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        pkg: [api, admin]
    defaults:
      run:
        working-directory: packages/${{ matrix.pkg }}
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Audit dependencies
        run: npm run audit:ci

      - name: Run tests
        run: npm test

      # on the API slice, also check coverage
      - name: Enforce coverage threshold
        if: matrix.pkg == 'api'
        run: npm run coverage

      - name: Upload Jest cache
        uses: actions/cache@v3
        with:
          path: packages/${{ matrix.pkg }}/node_modules/.cache
          key: ${{ runner.os }}-jest-${{ matrix.pkg }}-${{ hashFiles('**/package-lock.json') }}

  # 2) Build & Push API Docker image
  build-and-push-api:
    name: ðŸ“¦ Build & Push API image
    needs: test
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: packages/api
    steps:
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Buildx
        uses: docker/setup-buildx-action@v2

      - name: Restore buildx cache
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build & push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new
      
      - name: Audit image dependencies
        run: |
          docker run --rm ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest \
          sh -c "npm audit --production --audit-level=moderate"

      - name: Rotate buildx cache
        if: success()
        run: |
          rm -rf /tmp/.buildx-cache && mv /tmp/.buildx-cache-new /tmp/.buildx-cache

  # 3) Build Admin for static hosting (optional deploy step later)
  build-admin:
    name: ðŸš€ Build Admin
    needs: test
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: packages/admin
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build Next.js admin
        run: npm run build

  # 4) Baseline OWASP ZAP passive scan
  security-scan:
    name: ðŸ”’ Baseline OWASP ZAP passive scan
    needs: build-and-push-api
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: packages/api

    services:
      postgres:
        image: postgres:14
        ports: [5432]
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: winlo
        options: >-
          --health-cmd "pg_isready -U postgres"
          --health-interval 5s
          --health-timeout 2s
          --health-retries 12

      redis:
        image: redis:7
        ports: [6379]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Login to GHCR
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Pull API image
        run: docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest

      - name: Start API container
        run: |
          docker run -d \
            --name winlo-api \
            --network host \
            -e PGHOST=localhost \
            -e PGUSER=postgres \
            -e PGPASSWORD=postgres \
            -e PGDATABASE=winlo \
            -e REDIS_URL=redis://localhost:6379 \
            -e PORT=3000 \
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest

      - name: Wait for API to be healthy
        run: |
          for i in {1..12}; do
            if curl -fs http://localhost:3000/health; then
              echo "API is up"; exit 0
            fi
            echo "Waiting for APIâ€¦"
            sleep 5
          done
          exit 1

      - name: Smokeâ€‘test endpoints
        run: |
          curl -f http://localhost:3000/health
          curl -f http://localhost:3000/v1/products

      - name: Run ZAP baseline scan
        uses: zaproxy/action-baseline@v0.4.0
        with:
          target: 'http://localhost:3000'
          fail_action: true

      - name: Tear down API
        if: always()
        run: docker rm -f winlo-api
